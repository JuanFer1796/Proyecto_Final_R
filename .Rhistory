train_numericas <- train[,sapply(train, is.numeric)]
multi.hist(train_numericas, global = FALSE)
library(tidyverse)
library(psych)
library(ggthemes)
setwd("D:/Google Drive/UVG/V Semestre/Data Mining/Proyecto 1/Proyecto_Final_R")
train <- read.csv("train.csv", stringsAsFactors = TRUE)
test <- read.csv("test.csv", stringsAsFactors = TRUE)
#factorizacion de numericas
train <- train %>%
mutate(MSSubClass = as.factor(MSSubClass))
test <- test %>%
mutate(MSSubClass = as.factor(MSSubClass))
#1.a. ¿Que tipos de datos identificamos?
str(train)
#1.b. ¿Cual es la distribucion de las variables univariadas?
#revision de todas las variables numericas
train_numericas <- train[,sapply(train, is.numeric)]
multi.hist(train_numericas, global = FALSE)
vector_continuas_numericas <- c(2:3,8:14,16,27:29,37)
train_continuas_numericas <- train_numericas[,vector_continuas_numericas]
multi.hist(train_continuas_numericas, global = FALSE, bcol = 'pink')
vector_discretas_numericas <- c(4:7,17:26,35:36)
train_discretas_numericas <- train_numericas[,vector_discretas_numericas]
barplot(as.matrix(train_discretas_numericas[,5:10]),
main="Multiple Bar Plots",
# setting y label only
# because x-label will be our
# barplots name
ylab="Count",
# to plot the bars vertically
beside=TRUE,
)
barplot(as.matrix(train_discretas_numericas[,5:10]),
main="Multiple Bar Plots",
# setting y label only
# because x-label will be our
# barplots name
ylab="Count",
# to plot the bars vertically
beside=TRUE
)
table(train$LotShape, train$PoolQC)
length(vector_discretas_numericas)
barplot(train_discretas_numericas[, 2])
barplot(train_discretas_numericas)
barplot(train_discretas_numericas$FullBath)
barplot(table(train_discretas_numericas$FullBath))
barplot(table(train_discretas_numericas[, 'FullBath']))
par(mfrow=c(4,4))
for(c in colnames(train_discretas_numericas)) {
barplot(train_discretas_numericas[, c])
}
par(mfrow=c(4,4))
for(c in colnames(train_discretas_numericas)) {
barplot(table(train_discretas_numericas[, c]))
}
#revision de todas las variables numericas
train_numericas <- train[,sapply(train, is.numeric)]
multi.hist(train_numericas, global = FALSE)
str(train)
View(train)
train %>% count(BsmtFinType1, BsmtFinType2)
train %>% count(BsmtCond, BsmtFinType1)
barplot(table(train$BsmtFinType2))
barplot(table(train$BsmtFinType1))
sapply(train$LotShape, switch,
"Reg"=0,
"Slightly irregular"=1,
"Moderately Irregular"=2,
"Irregular"=3)
sapply(train$LotShape, switch,
"Reg"=0,
"Slightly irregular"=1,
"Moderately Irregular"=2,
"Irregular"=3)
sapply(train$LandSlope, switch,
"Gtl" = 1,
"Mod"  = 2,
"Sev" = 3)
sapply(train$Utilities, switch,
"ELO" = 1,
"NoSeWa" = 2,
"NoSeWr" = 3,
"AllPub" = 4)
ordinal_condition <- function(col) {
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5)
}
ordinal_condition(train$ExterQual)
is.na(ordinal_condition(train$ExterQual))
sum(is.na(ordinal_condition(train$ExterQual)))
sum(is.na(ordinal_condition(train$BsmtQual)))
ordinal_condition(train$BsmtQual)
ordinal_condition(train$BsmtQual)
ordinal_condition(train$ExterQual)
warnings()
ordinal_condition <- function(col) {
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
NA = NA)
}
ordinal_condition(train$BsmtQual)
sum(is.na(train$BsmtCond))
ordinal_condition <- function(col) {
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
NA)
}
ordinal_condition(train$BsmtQual)
train %>% count(BsmtQual)
sapply(train$BsmtQual, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
`NA` = NA)
sapply(train$BsmtCond, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
`NA` = NA)
sapply(train$HeatingQC, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
`NA` = NA)
sapply(train$BsmtCond, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
`NA` = 6)
sapply(train$BsmtCond, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
6)
as.vector(sapply(train$BsmtCond, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
6))
train2 <- train %>% mutate(BsmtQual = ordinal_condition(BsmtQual))
)
View(train2)
ordinal_condition <- function(col) {
col[is.na(col)] <- "NA"
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
"NA" = NA)
}
ordinal_condition(train$BsmtQual)
ordinal_condition <- function(col) {
col[is.na(col)] <- "NA"
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
"NA" = NA)
}
ordinal_condition(train$BsmtQual)
ordinal_condition <- function(col) {
col[is.na(col)] <- "NA"
sapply(col, switch,
"Po" = 1,
"Fa" = 2,
"TA" = 3,
"Gd" = 4,
"Ex" = 5,
"NA" = 0)
}
ordinal_condition(train$BsmtQual)
ordinal_condition <- function(col) {
ifelse(col = "Po", 1,
ifelse(col = "Fa", 2,
ifelse(col = "TA", 3,
ifelse(col = "Gd", 4,
ifelse(col = "Ex", 5, NA)))))
}
ordinal_condition(train$BsmtQual)
#Condicion usada por muchas variables ordinales
ordinal_condition <- function(col) {
ifelse(col == "Po", 1,
ifelse(col == "Fa", 2,
ifelse(col == "TA", 3,
ifelse(col == "Gd", 4,
ifelse(col == "Ex", 5, NA)))))
}
ordinal_condition(train$BsmtQual)
ordinal_condition(train$ExterQual)
ordinal_condition(train$BsmtCond)
bsmt_condition <- function(col) {
ifelse(col == "LwQ", 1,
ifelse(col == "Rec", 2,
ifelse(col == "BLQ", 3,
ifelse(col == "ALQ", 4,
ifelse(col == "GLQ", 5, NA)))))
}
bsmt_condition(train$BsmtFinType1)
train %>% count(Functional)
train %>% count(BsmtCond)
ifelse(GarageFinish == "Unf", 1,
ifelse(GarageFinish == "Rough Finished", 2,
ifelse(GarageFinish == "Finished", 3, NA)))
ifelse(train$GarageFinish == "Unf", 1,
ifelse(train$GarageFinish == "Rough Finished", 2,
ifelse(train$GarageFinish == "Finished", 3, NA)))
transform_ordinal <- function(df) {
df %>%
mutate(Alley = if_else(is.na(Alley), "None", Alley),
LotShape = sapply(LotShape, switch,
"Reg" = 1,
"Slightly irregular" = 2,
"Moderately Irregular" = 3,
"Irregular"=4),
Utilities = sapply(Utilities, switch,
"ELO" = 1,
"NoSeWa" = 2,
"NoSeWr" = 3,
"AllPub" = 4),
LandSlope = sapply(LandSlope, switch,
"Gtl" = 1,
"Mod"  = 2,
"Sev" = 3),
ExterQual = ordinal_condition(ExterQual),
ExterCond = ordinal_condition(ExterCond),
BsmtQual = ordinal_condition(BsmtQual),
BsmtCond = ordinal_condition(BsmtCond),
BsmtExposure = ifelse(BsmtExposure == "No", 1,
ifelse(BsmtExposure == "Mn", 2,
ifelse(BsmtExposure == "Av", 3,
ifelse(BsmtExposure == "Gd", 4, NA)))),
BsmtFinType1 = bsmt_condition(BsmtFinType1),
BsmtFinType2 = bsmt_condition(BsmtFinType2),
HeatingQC = ordinal_condition(HeatingQC),
KitchenQual = ordinal_condition(KitchenQual),
Functional = sapply(Functional, switch,
"Typ" = 1,
"Min1" = 2,
"Min2" = 2,
"Mod" = 2,
"Maj1" = 3,
"Maj2" = 3,
"Sev" = 3,
"Sal" = 3),
FireplaceQu = ordinal_condition(FireplaceQu),
GarageFinish = ifelse(GarageFinish == "Unf", 1,
ifelse(GarageFinish == "Rough Finished", 2,
ifelse(GarageFinish == "Finished", 3, NA))),
GarageQual = ordinal_condition(GarageQual),
GarageCond = ordinal_condition(GarageCond),
PoolQC = ordinal_condition(PoolQC)
)
}
train <- transform_ordinal(train)
transform_ordinal <- function(df) {
df %>%
mutate(Alley = ifelse(is.na(Alley), "None", Alley),
LotShape = sapply(LotShape, switch,
"Reg" = 1,
"Slightly irregular" = 2,
"Moderately Irregular" = 3,
"Irregular"=4),
Utilities = sapply(Utilities, switch,
"ELO" = 1,
"NoSeWa" = 2,
"NoSeWr" = 3,
"AllPub" = 4),
LandSlope = sapply(LandSlope, switch,
"Gtl" = 1,
"Mod"  = 2,
"Sev" = 3),
ExterQual = ordinal_condition(ExterQual),
ExterCond = ordinal_condition(ExterCond),
BsmtQual = ordinal_condition(BsmtQual),
BsmtCond = ordinal_condition(BsmtCond),
BsmtExposure = ifelse(BsmtExposure == "No", 1,
ifelse(BsmtExposure == "Mn", 2,
ifelse(BsmtExposure == "Av", 3,
ifelse(BsmtExposure == "Gd", 4, NA)))),
BsmtFinType1 = bsmt_condition(BsmtFinType1),
BsmtFinType2 = bsmt_condition(BsmtFinType2),
HeatingQC = ordinal_condition(HeatingQC),
KitchenQual = ordinal_condition(KitchenQual),
Functional = sapply(Functional, switch,
"Typ" = 1,
"Min1" = 2,
"Min2" = 2,
"Mod" = 2,
"Maj1" = 3,
"Maj2" = 3,
"Sev" = 3,
"Sal" = 3),
FireplaceQu = ordinal_condition(FireplaceQu),
GarageFinish = ifelse(GarageFinish == "Unf", 1,
ifelse(GarageFinish == "Rough Finished", 2,
ifelse(GarageFinish == "Finished", 3, NA))),
GarageQual = ordinal_condition(GarageQual),
GarageCond = ordinal_condition(GarageCond),
PoolQC = ordinal_condition(PoolQC)
)
}
train <- transform_ordinal(train)
View(train)
str(train)
transform_ordinal <- function(df) {
df %>%
mutate(LotShape = sapply(LotShape, switch,
"Reg" = 1,
"Slightly irregular" = 2,
"Moderately Irregular" = 3,
"Irregular"=4),
Utilities = sapply(Utilities, switch,
"ELO" = 1,
"NoSeWa" = 2,
"NoSeWr" = 3,
"AllPub" = 4),
LandSlope = sapply(LandSlope, switch,
"Gtl" = 1,
"Mod"  = 2,
"Sev" = 3),
ExterQual = ordinal_condition(ExterQual),
ExterCond = ordinal_condition(ExterCond),
BsmtQual = ordinal_condition(BsmtQual),
BsmtCond = ordinal_condition(BsmtCond),
BsmtExposure = ifelse(BsmtExposure == "No", 1,
ifelse(BsmtExposure == "Mn", 2,
ifelse(BsmtExposure == "Av", 3,
ifelse(BsmtExposure == "Gd", 4, NA)))),
BsmtFinType1 = bsmt_condition(BsmtFinType1),
BsmtFinType2 = bsmt_condition(BsmtFinType2),
HeatingQC = ordinal_condition(HeatingQC),
KitchenQual = ordinal_condition(KitchenQual),
Functional = sapply(Functional, switch,
"Typ" = 1,
"Min1" = 2,
"Min2" = 2,
"Mod" = 2,
"Maj1" = 3,
"Maj2" = 3,
"Sev" = 3,
"Sal" = 3),
FireplaceQu = ordinal_condition(FireplaceQu),
GarageFinish = ifelse(GarageFinish == "Unf", 1,
ifelse(GarageFinish == "Rough Finished", 2,
ifelse(GarageFinish == "Finished", 3, NA))),
GarageQual = ordinal_condition(GarageQual),
GarageCond = ordinal_condition(GarageCond),
PoolQC = ordinal_condition(PoolQC)
)
}
train <- read.csv("train.csv", stringsAsFactors = TRUE)
train <- train %>%
mutate(MSSubClass = as.factor(MSSubClass))
train <- transform_ordinal(train)
test <- transform_ordinal(test)
View(train)
rm(train2)
vector_discretas_numericas <- c(4:7,17:26,35:36)
train_discretas_numericas <- train_numericas[,vector_discretas_numericas]
par(mfrow=c(4,4))
for(c in colnames(train_discretas_numericas)) {
barplot(table(train_discretas_numericas[, c]))
}
train_numericas <- train[,sapply(train, is.numeric)]
multi.hist(train_numericas, global = FALSE)
train %>% count(Utilities)
train2 <- read.csv("train.csv", stringsAsFactors = TRUE)
train2 %>% count(Utilities)
train %>% count(LotShape)
train %>% count(LandSlope)
train %>% count(ExterQual)
train %>% count(BsmtCond)
train %>% count(BsmtFinSF2)
train %>% count(Functional)
train %>% count(GarageQual)
train %>% count(GarageCond)
train %>% count(LandSlope)
train %>% count(LotShape)
train %>% count(LandSlope)
train %>% count(ExterCond)
train %>% count(BsmtExposure)
train %>% count(Functional)
train2 %>% count(Functional)
train2 %>% count(GarageFinish)
train2 %>% count(GarageCond)
train %>% count(GarageCond)
train %>% count(ExterCond)
train2 %>% count(ExterCond)
train2 %>% count(BsmtCond)
train2 %>% count(BsmtFinType2)
train %>% count(BsmtFinType2)
train %>% count(BsmtFinType1, BsmtFinType1)
train %>% count(BsmtFinType1, BsmtFinType2)
train2 %>% count(HeatingQC)
train2 %>% filter(LowQualFinSF > 0)
train2 %>% count(BsmtHalfBath)
train2 %>% count(KitchenAbvGr)
train2 %>% count(GarageFinish)
train2 %>% filter(EnclosedPorch > 0)
train2 %>% filter(PoolArea > 0) %>% select(PoolArea)
train2 %>% count(PoolQC)
train2 %>% filter(OpenPorch > 0) %>% select(OpenPorchSF, EnclosedPorch, X3SsnPorch, ScreenPorch)
train2 %>% filter(OpenPorchSF > 0) %>% select(OpenPorchSF, EnclosedPorch, X3SsnPorch, ScreenPorch)
train2 %>% count(MiscVal)
combine_cols <- function(df) {
df %>%
mutate(BsmtFinSF = BsmtFinSF1 + BsmtFinSF2,
Porch = OpenPorchSF + EnclosedPorch + X3SsnPorch + ScreenPorch) %>%
select(-Id, -Utilities, -BsmtFinSF1, -BsmtFinSF2, -PoolQC, -OpenPorchSF, -EnclosedPorch, -X3SsnPorch, -ScreenPorch)
}
train3 <- train
train <- combine_cols(train)
test <- combine_cols(test)
train <- read.csv("train.csv", stringsAsFactors = TRUE)
test <- read.csv("test.csv", stringsAsFactors = TRUE)
#factorizacion de numericas
train <- train %>%
mutate(MSSubClass = as.factor(MSSubClass))
test <- test %>%
mutate(MSSubClass = as.factor(MSSubClass))
